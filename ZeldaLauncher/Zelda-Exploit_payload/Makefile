PATH := $(DEVKITPPC)/bin:$(PATH)
PREFIX ?= powerpc-eabi-
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc
CFLAGS = -std=gnu99 -Os -fno-builtin -fno-asynchronous-unwind-tables -Wl,-e_start
ASFLAGS = -mregnames -x assembler-with-cpp
LD = $(PREFIX)ld
GCC_VER := $(shell $(DEVKITPPC)/bin/powerpc-eabi-gcc -dumpversion)
LDFLAGS=-L$(DEVKITPPC)/lib/gcc/powerpc-eabi/$(GCC_VER) -lgcc -T link.ld 
OBJDUMP ?= $(PREFIX)objdump
project	:=	.
root	:=	$(CURDIR)
build	:=  $(root)/bin

DEVKITPATH=$(shell echo "$(DEVKITPRO)" | sed -e 's/^\([a-zA-Z]\):/\/\1/')
export PATH	:=	$(DEVKITPATH)/tools/bin:$(DEVKITPATH)/devkitPPC/bin:$(PATH)

sd_loader_elf := main_hook/main_hook.elf

all: clean setup main

main_hook.h: $(sd_loader_elf)
	@raw2c $<
    
$(sd_loader_elf):
	make -C main_hook
	
setup:
	mkdir -p $(root)/bin/

main: main_hook.h
	$(CC) $(CFLAGS) -c $(project)/main_hook.c
	$(CC) $(CFLAGS) -c $(project)/launcher.c
	$(AS) $(ASFLAGS) -c $(project)/syscalls.S
	cp -r $(root)/*.o $(build)
	rm $(root)/*.o
	$(LD) -s -o code.bin `find $(build) -name "*.o" ! -name "crt0.o"` --oformat binary  $(LDFLAGS) 
	$(LD) -s -o code.elf `find $(build) -name "*.o" ! -name "crt0.o"` $(LDFLAGS) 

clean:
	rm -rf $(build)
	rm -rf code.bin
	rm -rf code.elf
	rm -rf main_hook.c
	rm -rf main_hook.h
	make clean -C main_hook